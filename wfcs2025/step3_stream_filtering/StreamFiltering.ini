[General]
abstract = true
network = StreamFilteringShowcase
sim-time-limit = 1s
result-dir = "results/wip"

# configure Ethernet speed
*.*.eth[*].bitrate = 100Mbps

# configure client applications
*.client*.numApps = 1
*.client*.app[*].typename = "UdpSourceApp"
*.client1.app[0].display-name = "best-effort"
*.client2.app[0].display-name = "high-priority"
*.client*.app[*].io.destAddress = "server"
*.client1.app[0].io.destPort = 1000
*.client2.app[0].io.destPort = 1001
*.client1.app[0].io.displayStringTextFormat = "{numSent} best-effort"
*.client2.app[0].io.displayStringTextFormat = "{numSent} high-priority"

# configure best-effort stream from ~40Mbps to ~110Mbps
*.client1.app[0].source.packetLength = 1000B
*.client1.app[0].source.productionInterval = 200us + replaceUnit(sin(dropUnit(simTime() * 10)), "ms") / 8

# configure high-priority stream ~20Mbps
*.client2.app[0].source.packetLength = 500B
*.client2.app[0].source.productionInterval = 250us

# configure server applications
*.server.numApps = 2
*.server.app[*].typename = "UdpSinkApp"
*.server.app[0].display-name = "best-effort"
*.server.app[1].display-name = "high-priority"
*.server.app[0].io.localPort = 1000
*.server.app[1].io.localPort = 1001
*.server.app[0].io.displayStringTextFormat = "{numReceived} best-effort"
*.server.app[1].io.displayStringTextFormat = "{numReceived} high-priority"

# display number of packets sent and received on network nodes
*.visualizer.infoVisualizer.displayInfos = true
*.visualizer.infoVisualizer.placementHint = "top"
*.visualizer.infoVisualizer.modules = "*.*.app[*].io"

*.visualizer.networkNodeVisualizer.annotationSpacing = 12

[NoStreamFiltering]
description = "Excess best-effort traffic increases end-to-end delay for high-priority traffic"

# no additional configuration

[StreamFiltering]
description = "Per-stream filtering using single rate two color metering"

# enable outgoing streams
*.client*.hasOutgoingStreams = true

# configure client stream identification
*.client*.bridging.streamIdentifier.identifier.mapping = [{stream: "best-effort", packetFilter: expr(udp.destPort == 1000)},
                                                          {stream: "high-priority", packetFilter: expr(udp.destPort == 1001)}]

# configure client stream encoding
*.client*.bridging.streamCoder.encoder.mapping = [{stream: "best-effort", pcp: 0},
                                                  {stream: "high-priority", pcp: 4}]

# disable forwarding IEEE 802.1Q C-Tag
*.switch.bridging.directionReverser.reverser.excludeEncapsulationProtocols = ["ieee8021qctag"]

# configure stream decoding
*.switch.bridging.streamCoder.decoder.mapping = [{pcp: 0, stream: "best-effort"},
                                                 {pcp: 4, stream: "high-priority"}]

# enable ingress per-stream filtering
*.switch.hasIngressTrafficFiltering = true

# configure per-stream filtering
*.switch.bridging.streamFilter.ingress.typename = "BareIeee8021qFilter"
*.switch.bridging.streamFilter.ingress.numStreams = 2
*.switch.bridging.streamFilter.ingress.hasDefaultPath = false
*.switch.bridging.streamFilter.ingress.classifier.mapping = {"best-effort": 0, "high-priority": 1}
*.switch.bridging.streamFilter.ingress.meter[0].display-name = "best-effort"
*.switch.bridging.streamFilter.ingress.meter[1].display-name = "high-priority"
*.switch.bridging.streamFilter.ingress.meter[*].typename = "SingleRateTwoColorMeter"
*.switch.bridging.streamFilter.ingress.meter[0].committedInformationRate = 40Mbps
*.switch.bridging.streamFilter.ingress.meter[1].committedInformationRate = 20Mbps
*.switch.bridging.streamFilter.ingress.meter[0].committedBurstSize = 10kB
*.switch.bridging.streamFilter.ingress.meter[1].committedBurstSize = 5kB
